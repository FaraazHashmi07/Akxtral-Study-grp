rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // SUPER ADMIN GLOBAL OVERRIDE - Limited to specific admin collections only
    match /users/{document=**} {
      allow read, write: if request.auth != null && request.auth.token.super_admin == true;
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return request.auth != null && request.auth.token.super_admin == true;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isCommunityCreator(communityId) {
      return exists(/databases/$(database)/documents/communities/$(communityId)) &&
             get(/databases/$(database)/documents/communities/$(communityId)).data.createdBy == request.auth.uid;
    }

    function isMemberOfCommunity(communityId) {
      // Check if user exists in communityMembers with the composite key format
      return exists(/databases/$(database)/documents/communityMembers/$(request.auth.uid + '_' + communityId)) ||
             exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid));
    }

    function isCommunityAdmin(communityId) {
      // Check if user is the community creator (automatic admin rights)
      let isCreator = isCommunityCreator(communityId);

      // Check if user has admin role in roles subcollection
      let hasAdminRole = exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)).data.role == 'community_admin';

      // Check if user is in admins array (if it exists)
      let isInAdminsArray = exists(/databases/$(database)/documents/communities/$(communityId)) &&
                           request.auth.uid in get(/databases/$(database)/documents/communities/$(communityId)).data.get('admins', []);

      return isCreator || hasAdminRole || isInAdminsArray;
    }
    


    function isCommunityModerator(communityId) {
      // Check if user is the community creator (automatic admin rights)
      let isCreator = isCommunityCreator(communityId);

      // Check if user has moderator or admin role
      let hasModeratorRole = exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)) &&
                             get(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)).data.role in ['community_admin', 'community_moderator'];

      return isCreator || hasModeratorRole;
    }

    function isCommunityMember(communityId) {
      // Check if user is the community creator (automatic member rights)
      let isCreator = isCommunityCreator(communityId);

      // Check if user has any role in the community
      let hasRole = exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid));

      // Check if user has membership document in communityMembers collection
      // Note: Since membership documents use auto-generated IDs, we need to check if any document
      // exists where uid == current user AND communityId == target community
      // For security rules, we'll use a simplified approach and rely on the read permissions
      // of the communityMembers collection to validate membership

      return isCreator || hasRole;
    }


    
    // User profiles
    match /users/{uid} {
      allow read: if isAuthenticated() && (isOwner(uid) || isSuperAdmin());
      allow write: if isAuthenticated() && isOwner(uid);
      allow create: if isAuthenticated() && isOwner(uid);
      allow delete: if isAuthenticated() && (isOwner(uid) || isSuperAdmin());
    }
    
    // Communities - CRITICAL FIX: Allow reading for discovery and user communities
    match /communities/{communityId} {
      // Community metadata - readable by authenticated users for discovery
      allow read: if isAuthenticated(); // Allow all authenticated users to read communities for discovery
      allow create: if isAuthenticated(); // Any user can create communities

      // Allow member count updates when users join/leave
      allow update: if isAuthenticated() &&
                    (isCommunityAdmin(communityId) || isSuperAdmin() ||
                     // Allow any authenticated user to update memberCount and lastActivity
                     ('memberCount' in request.resource.data || 'lastActivity' in request.resource.data));

      // General write rule for admins (covers other operations)
      allow write: if isAuthenticated() && (isCommunityAdmin(communityId) || isSuperAdmin());

      // Special delete rule to avoid circular dependency in isCommunityAdmin function
      allow delete: if isAuthenticated() && (
        // Allow if user is the community creator (direct check without function)
        resource.data.createdBy == request.auth.uid ||
        // Allow if user has admin role in roles subcollection
        (exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)).data.role == 'community_admin') ||
        // Allow super admins
        isSuperAdmin()
      );
      
      // Community roles subcollection
      match /roles/{uid} {
        // Users can read their own role document (breaks circular dependency)
        allow read: if isAuthenticated() && (request.auth.uid == uid || isSuperAdmin());

        // Community members can read other roles (after they have their own role)
        allow read: if isAuthenticated() && isCommunityMember(communityId);

        // Users can create their own role when joining (MUST be before admin write rule)
        allow create: if isAuthenticated() && request.auth.uid == uid &&
                      request.resource.data.role == 'community_member';

        // Community creators can create their own admin role during community creation
        // This allows the creator to set up their admin role after community creation
        allow create: if isAuthenticated() && request.auth.uid == uid &&
                      request.resource.data.role == 'community_admin' &&
                      isCommunityCreator(communityId);

        // CRITICAL FIX: Community admins can create role documents for other users during approval
        allow create: if isAuthenticated() && isCommunityAdmin(communityId) &&
                      request.resource.data.role == 'community_member';

        // Community admins can manage all roles
        allow update: if isAuthenticated() && isCommunityAdmin(communityId);
        allow delete: if isAuthenticated() && (isCommunityAdmin(communityId) || isSuperAdmin());
      }

      // Community messages (new structure - direct under community)
      match /messages/{messageId} {
        // Allow all authenticated users to read messages
        allow read: if isAuthenticated();

        // Allow authenticated users to create messages with their own authorId
        allow create: if isAuthenticated() &&
                      request.resource.data.authorId == request.auth.uid &&
                      request.resource.data.communityId == communityId;

        // Simplified update rules to avoid function call issues
        allow update: if isAuthenticated() && (
          // Original author can edit their message content
          (resource.data.authorId == request.auth.uid &&
           request.resource.data.authorId == resource.data.authorId &&
           request.resource.data.communityId == resource.data.communityId) ||
          // Any authenticated user can update specific fields
          (request.resource.data.keys().hasAny(['hasThread', 'threadCount', 'threadName', 'reactions', 'questionAnswers'])) ||
          // Any authenticated user can pin/unpin (simplified for debugging)
          (request.resource.data.keys().hasAny(['isPinned', 'pinnedBy', 'pinnedAt']))
        );

        // Simplified delete rule
        allow delete: if isAuthenticated() && (
          resource.data.authorId == request.auth.uid ||
          isSuperAdmin()
        );

        // Thread messages subcollection
        match /threads/{threadMessageId} {
          // Allow authenticated users to read thread messages
          allow read: if isAuthenticated();

          // Allow authenticated users to create thread messages with their own authorId
          allow create: if isAuthenticated() &&
                        request.resource.data.authorId == request.auth.uid &&
                        request.resource.data.communityId == communityId;

          // Allow original author to update their thread messages
          allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;

          // Allow original author or super admin to delete thread messages
          allow delete: if isAuthenticated() && (
            resource.data.authorId == request.auth.uid ||
            isSuperAdmin()
          );
        }
      }

      // Community resources (nested under community)
      match /resources/{resourceId} {
        allow read: if isAuthenticated() && (isCommunityMember(communityId) || isSuperAdmin());
        allow create: if isAuthenticated() && isCommunityMember(communityId);
        allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || isCommunityAdmin(communityId));
        allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isCommunityAdmin(communityId) || isSuperAdmin());
      }

      // Community events
      match /events/{eventId} {
        allow read: if isAuthenticated() && (isCommunityMember(communityId) || isSuperAdmin());
        allow create: if isAuthenticated() && isCommunityMember(communityId);
        allow update: if isAuthenticated() && (isOwner(resource.data.createdBy) || isCommunityModerator(communityId));
        allow delete: if isAuthenticated() && (isOwner(resource.data.createdBy) || isCommunityModerator(communityId) || isSuperAdmin());
      }

      // Community announcements (subcollection under communities)
      match /announcements/{announcementId} {
        // SECURITY FIX: Strict membership validation for announcements
        // Users can ONLY read announcements if they are verified community members
        allow read: if isAuthenticated() && isCommunityMember(communityId);

        // Only community admins can create, update, delete announcements
        allow create: if isAuthenticated() && isCommunityAdmin(communityId);
        allow update: if isAuthenticated() && isCommunityAdmin(communityId);
        allow delete: if isAuthenticated() && (isCommunityAdmin(communityId) || isSuperAdmin());
      }

      // Community announcement reads (user read tracking subcollection)
      match /announcementReads/{userId} {
        // SECURITY FIX: Users can only read/write their own read status AND must be community members
        allow read, write: if isAuthenticated() &&
                           request.auth.uid == userId &&
                           isCommunityMember(communityId);
      }
    }

    // Top-level resources collection (for current implementation)
    match /resources/{resourceId} {
      // SIMPLIFIED: Allow all authenticated users to read resources for now
      // TODO: Implement proper community membership checking
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() && request.resource.data.uploadedBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        isSuperAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        isSuperAdmin()
      );
    }

    // Join requests - for community approval workflow
    match /joinRequests/{requestId} {
      // Users can create join requests for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;

      // Users can read their own join requests
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isSuperAdmin());

      // Community admins can read all join requests for their communities
      allow read: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Community admins can update join requests (approve/reject)
      allow update: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Community admins can delete join requests
      allow delete: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Allow querying for authenticated users (application logic will filter by community)
      allow list: if isAuthenticated();
    }

    // Community members collection - FIXED: Proper permission hierarchy
    match /communityMembers/{memberId} {
      // Allow all authenticated users to read community memberships (needed for UI)
      allow read: if isAuthenticated();

      // Users can create their own membership when joining (MUST be before general write rule)
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;

      // CRITICAL FIX: Community admins can create memberships when approving join requests
      allow create: if isAuthenticated() && isCommunityAdmin(request.resource.data.communityId);

      // Community admins can update and delete memberships
      allow update: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());
      allow delete: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());
    }

    // Typing indicators (temporary documents)
    match /typing/{communityId}/indicators/{userId} {
      // Allow all authenticated users to read typing indicators
      allow read: if isAuthenticated();
      // Allow users to create their own typing indicators
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to update their own typing indicators
      allow update: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to write (create/update) their own typing indicators
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to delete their own typing indicators
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // PREVENT CREATION OF ANNOUNCEMENT COLLECTIONS AT ROOT LEVEL
    // Announcements should ONLY exist as subcollections under communities
    match /announcements/{document=**} {
      allow read, write: if false; // Explicitly deny all access to root-level announcements
    }

    match /announcementReads/{document=**} {
      allow read, write: if false; // Explicitly deny all access to root-level announcementReads
    }

  }
}
