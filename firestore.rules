rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // SUPER ADMIN GLOBAL OVERRIDE - Must be first rule
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token.super_admin == true;
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return request.auth != null && request.auth.token.super_admin == true;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isCommunityCreator(communityId) {
      return exists(/databases/$(database)/documents/communities/$(communityId)) &&
             get(/databases/$(database)/documents/communities/$(communityId)).data.createdBy == request.auth.uid;
    }
    
    function isCommunityAdmin(communityId) {
      // Check if user is the community creator (automatic admin rights)
      let isCreator = isCommunityCreator(communityId);

      // Check if user has admin role in roles subcollection
      let hasAdminRole = exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)).data.role == 'community_admin';

      return isCreator || hasAdminRole;
    }

    function isCommunityModerator(communityId) {
      // Check if user is the community creator (automatic admin rights)
      let isCreator = isCommunityCreator(communityId);

      // Check if user has moderator or admin role
      let hasModeratorRole = exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)) &&
                             get(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)).data.role in ['community_admin', 'community_moderator'];

      return isCreator || hasModeratorRole;
    }

    function isCommunityMember(communityId) {
      // Check if user is the community creator (automatic member rights)
      let isCreator = isCommunityCreator(communityId);

      // Check if user has any role in the community
      let hasRole = exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid));

      // Check if user has membership document in communityMembers collection
      // Note: Since membership documents use auto-generated IDs, we need to check if any document
      // exists where uid == current user AND communityId == target community
      // For security rules, we'll use a simplified approach and rely on the read permissions
      // of the communityMembers collection to validate membership

      return isCreator || hasRole;
    }


    
    // User profiles
    match /users/{uid} {
      allow read: if isAuthenticated() && (isOwner(uid) || isSuperAdmin());
      allow write: if isAuthenticated() && isOwner(uid);
      allow create: if isAuthenticated() && isOwner(uid);
      allow delete: if isAuthenticated() && (isOwner(uid) || isSuperAdmin());
    }
    
    // Communities - CRITICAL FIX: Allow reading for discovery and user communities
    match /communities/{communityId} {
      // Community metadata - readable by authenticated users for discovery, writable by admins
      allow read: if isAuthenticated(); // Allow all authenticated users to read communities for discovery
      allow write: if isAuthenticated() && (isCommunityAdmin(communityId) || isSuperAdmin());
      allow create: if isAuthenticated(); // Any user can create communities

      // Special delete rule to avoid circular dependency in isCommunityAdmin function
      allow delete: if isAuthenticated() && (
        // Allow if user is the community creator (direct check without function)
        resource.data.createdBy == request.auth.uid ||
        // Allow if user has admin role in roles subcollection
        (exists(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/communities/$(communityId)/roles/$(request.auth.uid)).data.role == 'community_admin') ||
        // Allow super admins
        isSuperAdmin()
      );
      
      // Community roles subcollection
      match /roles/{uid} {
        allow read: if isAuthenticated() && (isCommunityMember(communityId) || isSuperAdmin());
        allow write: if isAuthenticated() && isCommunityAdmin(communityId);
        allow create: if isAuthenticated() && isCommunityAdmin(communityId);
        allow delete: if isAuthenticated() && (isCommunityAdmin(communityId) || isSuperAdmin());
      }

      // Community messages (new structure - direct under community)
      match /messages/{messageId} {
        // Allow all authenticated users to read messages
        allow read: if isAuthenticated();

        // Allow authenticated users to create messages with their own authorId
        allow create: if isAuthenticated() &&
                      request.resource.data.authorId == request.auth.uid &&
                      request.resource.data.communityId == communityId;

        // Simplified update rules to avoid function call issues
        allow update: if isAuthenticated() && (
          // Original author can edit their message content
          (resource.data.authorId == request.auth.uid &&
           request.resource.data.authorId == resource.data.authorId &&
           request.resource.data.communityId == resource.data.communityId) ||
          // Any authenticated user can update specific fields
          (request.resource.data.keys().hasAny(['hasThread', 'threadCount', 'threadName', 'reactions', 'questionAnswers'])) ||
          // Any authenticated user can pin/unpin (simplified for debugging)
          (request.resource.data.keys().hasAny(['isPinned', 'pinnedBy', 'pinnedAt']))
        );

        // Simplified delete rule
        allow delete: if isAuthenticated() && (
          resource.data.authorId == request.auth.uid ||
          isSuperAdmin()
        );

        // Thread messages subcollection
        match /threads/{threadMessageId} {
          // Allow authenticated users to read thread messages
          allow read: if isAuthenticated();

          // Allow authenticated users to create thread messages with their own authorId
          allow create: if isAuthenticated() &&
                        request.resource.data.authorId == request.auth.uid &&
                        request.resource.data.communityId == communityId;

          // Allow original author to update their thread messages
          allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;

          // Allow original author or super admin to delete thread messages
          allow delete: if isAuthenticated() && (
            resource.data.authorId == request.auth.uid ||
            isSuperAdmin()
          );
        }
      }

      // Community resources (nested under community)
      match /resources/{resourceId} {
        allow read: if isAuthenticated() && (isCommunityMember(communityId) || isSuperAdmin());
        allow create: if isAuthenticated() && isCommunityMember(communityId);
        allow update: if isAuthenticated() && (isOwner(resource.data.authorId) || isCommunityAdmin(communityId));
        allow delete: if isAuthenticated() && (isOwner(resource.data.authorId) || isCommunityAdmin(communityId) || isSuperAdmin());
      }

      // Community events
      match /events/{eventId} {
        allow read: if isAuthenticated() && (isCommunityMember(communityId) || isSuperAdmin());
        allow create: if isAuthenticated() && isCommunityMember(communityId);
        allow update: if isAuthenticated() && (isOwner(resource.data.createdBy) || isCommunityModerator(communityId));
        allow delete: if isAuthenticated() && (isOwner(resource.data.createdBy) || isCommunityModerator(communityId) || isSuperAdmin());
      }

      // Community announcements
      match /announcements/{announcementId} {
        // Allow all authenticated users to read announcements
        // Application logic will handle community membership validation
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isCommunityAdmin(communityId);
        allow update: if isAuthenticated() && isCommunityAdmin(communityId);
        allow delete: if isAuthenticated() && (isCommunityAdmin(communityId) || isSuperAdmin());
      }

      // Community announcement reads (user read tracking)
      match /announcementReads/{userId} {
        // Users can only read/write their own read status
        // Simplified: Allow if user is authenticated and owns the document
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Top-level resources collection (for current implementation)
    match /resources/{resourceId} {
      // SIMPLIFIED: Allow all authenticated users to read resources for now
      // TODO: Implement proper community membership checking
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() && request.resource.data.uploadedBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        isSuperAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        isSuperAdmin()
      );
    }

    // Join requests - for community approval workflow
    match /joinRequests/{requestId} {
      // Users can create join requests for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;

      // Users can read their own join requests
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isSuperAdmin());

      // Community admins can read all join requests for their communities
      allow read: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Community admins can update join requests (approve/reject)
      allow update: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Community admins can delete join requests
      allow delete: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Allow querying for authenticated users (application logic will filter by community)
      allow list: if isAuthenticated();
    }

    // Community members collection - SIMPLIFIED: Allow authenticated users to read memberships
    match /communityMembers/{memberId} {
      // Allow all authenticated users to read community memberships (needed for UI)
      allow read: if isAuthenticated();

      // Community admins can manage memberships
      allow write: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Users can create their own membership when joining
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;

      // Allow updates for admins and super admins
      allow update: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());

      // Allow deletion for admins and super admins
      allow delete: if isAuthenticated() && (isCommunityAdmin(resource.data.communityId) || isSuperAdmin());
    }

    // Typing indicators (temporary documents)
    match /typing/{communityId}/indicators/{userId} {
      // Allow all authenticated users to read typing indicators
      allow read: if isAuthenticated();
      // Allow users to create their own typing indicators
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to update their own typing indicators
      allow update: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to write (create/update) their own typing indicators
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to delete their own typing indicators
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rate limiting for sensitive operations
    match /{document=**} {
      allow write: if request.time > resource.data.lastModified + duration.value(1, 's');
    }
  }
}
