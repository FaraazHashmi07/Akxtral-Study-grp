rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return request.auth != null && request.auth.token.super_admin == true;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 2 * 1024 * 1024; // 2MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType in [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain'
      ] && request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // User avatars
    match /avatars/{uid}/{fileName} {
      allow read: if true; // Avatars are public
      allow write: if isAuthenticated() &&
                      isOwner(uid) &&
                      isValidImageFile();
      allow delete: if isAuthenticated() &&
                       isOwner(uid);
    }
    
    // Community resources
    match /communities/{communityId}/resources/{resourceId}/{fileName} {
      allow read: if isAuthenticated(); // Members can read community resources
      allow write: if isAuthenticated() &&
                      (isValidImageFile() || isValidDocumentFile());
      allow delete: if isAuthenticated() &&
                       (isOwner(resource.metadata.uploadedBy) || isSuperAdmin());
    }

    // Community images (banners, logos, etc.)
    match /communities/{communityId}/images/{fileName} {
      allow read: if true; // Community images are public
      allow write: if isAuthenticated() && isValidImageFile();
      allow delete: if isAuthenticated() || isSuperAdmin(); // Any authenticated user can delete community images
    }

    // Super Admin access to all resources (for deletion)
    match /resources/{communityId}/{allPaths=**} {
      allow read, delete: if isSuperAdmin();
    }

    // Temporary uploads (for processing)
    match /temp/{uid}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(uid);
      allow delete: if isAuthenticated() && isOwner(uid);
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
